from pyglet.window import Window
from pyglet.app import run
from pyglet.shapes import Rectangle
from pyglet.graphics import Batch
from pyglet import clock
import colorsys

class Renderer(Window):
    def __init__(self):
        super().__init__(860, 560, "Bubble Sort Visualization")
        self.batch = Batch()
        self.data = [10, 7, 30, 21, 5, 8, 27, 3, 2, 28, 9, 4, 23, 6, 1, 12, 15, 25, 11, 13, 24, 14, 20, 17, 29, 18, 16, 19, 22, 26]
        self.colors = [colorsys.hsv_to_rgb(value/30, 0.5, 0.8) for value in self.data]
        self.bars = []
        for i, (value, color) in enumerate(zip(self.data, self.colors)):
            rgb_color = tuple(int(c * 255) for c in color)
            self.bars.append(Rectangle(50 + i * 25, 50, 15, value * 15, color=rgb_color, batch=self.batch))

    def bubble_sort(self):
        n = len(self.data)
        for i in range(n-1):
            for j in range(0, n-i-1):
                if self.data[j] > self.data[j+1]:
                    self.data[j], self.data[j+1] = self.data[j+1], self.data[j]
                    self.colors[j], self.colors[j+1] = self.colors[j+1], self.colors[j]
                    self.bars = []
                    for i, (value, color) in enumerate(zip(self.data, self.colors)):
                        rgb_color = tuple(int(c * 255) for c in color)
                        self.bars.append(Rectangle(50 + i * 25, 50, 15, value * 15, color=rgb_color, batch=self.batch))
                    return

    def on_update(self, deltatime):
        self.bubble_sort()

    def on_draw(self):
        self.clear()
        self.batch.draw()

renderer = Renderer()
clock.schedule_interval(renderer.on_update, 0.25)
run()
